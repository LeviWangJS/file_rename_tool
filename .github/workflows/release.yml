name: 'Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  create-release:
    runs-on: macos-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        with:
          script: |
            try {
              console.log('Creating release with version:', process.env.VERSION);
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${process.env.VERSION}`,
                name: `图片批量重命名工具 v${process.env.VERSION}`,
                body: '请查看更改日志了解详情。',
                draft: true,
                prerelease: false
              });
              console.log('Release created successfully with ID:', data.id);
              return data.id;
            } catch (error) {
              console.log('Error creating release:', error);
              console.log('API response:', error.response?.data);
              throw error;
            }

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Windows Environment Variables
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          echo "TAURI_WINDOWS_SKIP_SIGNING=true" >> $env:GITHUB_ENV
          echo "TAURI_WINDOWS_NSIS_ONLY=true" >> $env:GITHUB_ENV
      - name: Install app dependencies
        run: npm install
      - name: Build Tauri app (macOS)
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: v${{ needs.create-release.outputs.version }}
          releaseName: 图片批量重命名工具 v${{ needs.create-release.outputs.version }}
          includeUpdaterJson: true
          tauriScript: npm run tauri
      - name: Build Tauri app (Windows)
        if: matrix.platform == 'windows-latest'
        run: npx tauri build --target nsis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_WINDOWS_NSIS_ONLY: true
          TAURI_WINDOWS_SKIP_SIGNING: true

  publish-release:
    runs-on: macos-latest
    needs: [create-release, build]
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            try {
              console.log('Publishing release with ID:', process.env.RELEASE_ID);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: parseInt(process.env.RELEASE_ID),
                draft: false
              });
              console.log('Release published successfully');
            } catch (error) {
              console.log('Error publishing release:', error);
              console.log('API response:', error.response?.data);
              throw error;
            } 