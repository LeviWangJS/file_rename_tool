name: 'Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Create release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: "images_rename_tool v${{ steps.get_version.outputs.version }}"
          body: ""
          draft: true
          prerelease: false

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macOS-arm64
          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macOS-intel
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      # Windows specific configuration
      - name: Setup Windows Environment
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # 1. Update Chocolatey and install required tools
          choco upgrade chocolatey -y
          choco install -y wixtoolset --version 3.11.2
          choco install -y nsis --force

          # 2. Set WiX environment variables
          $wixPath = "C:\Program Files (x86)\WiX Toolset v3.11\bin"
          echo "WIX=${wixPath}" >> $env:GITHUB_ENV
          echo "Path=${wixPath};$env:Path" >> $env:GITHUB_ENV

          # 3. Install WebView2 runtime
          $webview2Url = "https://go.microsoft.com/fwlink/p/?LinkId=2124703"
          $installerPath = "$env:TEMP\MicrosoftEdgeWebview2Setup.exe"
          if (-not (Test-Path "C:\Program Files (x86)\Microsoft\EdgeWebView\Application\*")) {
              Invoke-WebRequest -Uri $webview2Url -OutFile $installerPath
              Start-Process -FilePath $installerPath -Args "/silent /install" -Wait
          }

          # 4. Setup Rust toolchain
          rustup target add x86_64-pc-windows-msvc
          rustup show

      # macOS specific configuration
      - name: Setup macOS Rust
        if: matrix.platform == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install app dependencies
        run: npm install

      - name: Build Tauri App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            npm run tauri build -- --target ${{ matrix.target }}
          else
            # Windows build with explicit target
            npx tauri build --target ${{ matrix.target }}
          fi

      # Rename build artifacts to include platform information
      - name: Rename build artifacts
        shell: bash
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          if [[ -z "$VERSION" ]]; then
            VERSION="1.0.0"
          fi
          
          mkdir -p dist
          
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            echo "Processing macOS build artifacts..."
            
            # Find all DMG files
            echo "Searching for DMG files..."
            find src-tauri -name "*.dmg" | sort
            
            if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
              # ARM64 macOS - search for any DMG in relevant directories
              # First try the expected target-specific path
              DMG_FILES=($(find src-tauri/target/aarch64-apple-darwin -name "*.dmg" 2>/dev/null || echo ""))
              
              # If not found, try the default release path (which might be used for ARM builds on ARM macs)
              if [[ ${#DMG_FILES[@]} -eq 0 || -z "${DMG_FILES[0]}" ]]; then
                DMG_FILES=($(find src-tauri/target/release -name "*.dmg" 2>/dev/null || echo ""))
              fi
              
              if [[ ${#DMG_FILES[@]} -gt 0 && -n "${DMG_FILES[0]}" ]]; then
                echo "Found ARM64 DMG file: ${DMG_FILES[0]}"
                cp "${DMG_FILES[0]}" "dist/images_rename_tool_${VERSION}_macOS_arm64.dmg"
                echo "Copied to: dist/images_rename_tool_${VERSION}_macOS_arm64.dmg"
              else
                echo "Warning: No ARM64 DMG file found"
              fi
            elif [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
              # Intel macOS - search for any DMG in the Intel target directory
              DMG_FILES=($(find src-tauri/target/x86_64-apple-darwin -name "*.dmg" 2>/dev/null || echo ""))
              
              if [[ ${#DMG_FILES[@]} -gt 0 && -n "${DMG_FILES[0]}" ]]; then
                echo "Found Intel DMG file: ${DMG_FILES[0]}"
                cp "${DMG_FILES[0]}" "dist/images_rename_tool_${VERSION}_macOS_intel.dmg"
                echo "Copied to: dist/images_rename_tool_${VERSION}_macOS_intel.dmg"
              else
                echo "Warning: No Intel DMG file found"
              fi
            fi
          else
            # Windows
            echo "Processing Windows build artifacts..."
            SETUP_FILES=($(find src-tauri -name "*-setup.exe" 2>/dev/null || echo ""))
            
            if [[ ${#SETUP_FILES[@]} -gt 0 && -n "${SETUP_FILES[0]}" ]]; then
              echo "Found Windows installer: ${SETUP_FILES[0]}"
              cp "${SETUP_FILES[0]}" "dist/images_rename_tool_${VERSION}_Windows_x64-setup.exe"
              echo "Copied to: dist/images_rename_tool_${VERSION}_Windows_x64-setup.exe"
            else
              echo "Warning: No Windows installer found"
            fi
          fi
          
          # List generated files
          echo "Generated files:"
          find dist -type f | sort

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: dist/*

  publish-release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts for debugging
        run: |
          echo "Listing all downloaded artifacts:"
          find artifacts -type f | sort
          echo "------------------------------------"

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Copy all found files to release-files directory
          # Use find to locate files and copy them
          for dir in artifacts/release-*; do
            if [ -d "$dir" ]; then
              echo "Processing directory: $dir"
              # Find any files in this directory and copy them
              find "$dir" -type f | while read file; do
                echo "Copying: $file"
                cp "$file" release-files/
              done
            fi
          done
          
          # Check if we found any files
          if [ -z "$(ls -A release-files 2>/dev/null)" ]; then
            echo "WARNING: No files were found in the artifacts directories!"
            echo "Creating a placeholder file to prevent workflow failure"
            echo "No build artifacts were found. Please check the build logs." > release-files/README.txt
          fi
          
          echo "Release files:"
          find release-files -type f | sort
          
          # Make sure permissions are correct
          chmod 644 release-files/*

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          draft: false
          files: release-files/*